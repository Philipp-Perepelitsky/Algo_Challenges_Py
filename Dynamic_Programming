## Challenge: https://www.hackerrank.com/challenges/max-array-sum/problem?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=dynamic-programming

## Solution:

# Complete the maxSubsetSum function below.
def maxSubsetSum(arr):
    a = arr
    if len(a) == 1:
        return a[-1]
    m1 = a[-2]
    m2 = a[-1]
    i = len(a)-3
    while i > -1:
        v = a[i]
        if v < 0 or v == 0:
            c = max(m1,m2)
            m1 = c
            m2 = c
            i -= 1
            continue
        n1 = v + m2
        n2 = max(m1,m2)
        m1 = max(n1,v)
        m2 = n2
        i -= 1
    m = max(m1,m2)
    return m

## Challenge: https://www.hackerrank.com/challenges/abbr/problem?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=dynamic-programming

## Solution:

# Complete the abbreviation function below.
def abbreviation(a, b):
    a = list(a)
    b = list(b)
    l = [-1]
    i = 0
    while i < len(a):
        #print(i)
        #print(l)
        cl = [-1]
        c = a[i]
        d = -1
        j = 0
        while j < len(l):
            p = l[j] + 1
            if c == c.lower():
                if d != p-1:
                    cl.append(p-1)
            if p < len(b):
                bc = b[p]
                if bc == c.upper():
                    cl.append(p)
                    d = p
            j += 1
        l = cl
        i += 1
    if l[-1] == len(b) - 1:
        return 'YES'
    else:
        return 'NO'

## Challenge: https://www.hackerrank.com/challenges/candies/problem?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=dynamic-programming

## Solution:

# Complete the candies function below.
def candies(n, arr):
    a = arr
    m = 1
    g = 1
    b = 1
    i = 1
    l = 1
    while i < n:
        if a[i] > a[i-1]:
            g += 1
            m += g
            b = 1
            l = 1
        if a[i] == a[i-1]:
            g = 1
            m += g
            b = 1
            l = 1
        if a[i] < a[i-1]:
            m += l
            l += 1
            if b == 1:
                d = g - 1
                b = 0
            else:
                if d > 0:
                    d -= 1
            if d == 0:
                m += 1
            g = 1
        i += 1
    return m
