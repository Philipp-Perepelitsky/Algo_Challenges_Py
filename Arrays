## Challenge: https://www.hackerrank.com/challenges/2d-array/problem?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=arrays

## Solution: 

# Complete the hourglassSum function below.
def hourglassSum(arr):
    m = -100
    i = 0
    while i < 4:
        j = 0
        while j < 4:
            s = arr[i][j] + arr[i][j+1] + arr[i][j+2]
            s = s + arr[i+1][j+1]
            s = s + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]
            print(s)
            if s > m:
                m = s
            print(m)
            j += 1
        i += 1
    return m

## Challenge: https://www.hackerrank.com/challenges/ctci-array-left-rotation/problem?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=arrays

## Solution:

# Complete the rotLeft function below.
def rotLeft(a, d):
    n = len(a)
    b = [None]*n
    i = 0
    while i < n:
        b[i] = a[(i+d)%n]
        i += 1
    return b

## Challenge: https://www.hackerrank.com/challenges/new-year-chaos/problem?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=arrays

## Solution:

# Complete the minimumBribes function below.
def minimumBribes(q):
    x = 0
    l = len(q)
    if q[-2] > q[-1]:
        f = q[-1]
        s = q[-2]
        m = 1
    else:
        f = q[-2]
        s = q[-1]
        m = 0
    if q[-3] > s:
        t = q[-3]
        m += 2
    else:
        t = s
        if q[-3] > f:
            s = q[-3]
            m += 1
        else:
            s = f
            f = q[-3]
    #print(f,s,t)
    #print(m)
    i = -4
    while i > -(l+1):
        #print(i)
        c = q[i]
        if c > t:
            x = 1
            i = -(l+1)
        else:
            if c > s:
                t = c
                m += 2
            else:
                t = s
                if c > f:
                    s = c
                    m += 1
                else:
                    s = f
                    f = c
        #print(f,s,t)
        #print(m)
        i = i - 1
    #print(x)
    #print(m)
    if x == 0:    
        print(m)
    else:
        print("Too chaotic")


## Challenge: https://www.hackerrank.com/challenges/minimum-swaps-2/problem?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=arrays

## Solution:

# Complete the minimumSwaps function below.
def minimumSwaps(arr):
    m = 0
    l = len(arr)
    p = 0
    while p < l:
        x = 0
        while x < 1:
            c = arr[p]
            d = arr[c-1]
            if c == d:
                x = 1
            else: 
                arr[p] = d
                arr[c-1] = c
                m += 1
        p += 1
    return m

## Challenge: https://www.hackerrank.com/challenges/crush/problem?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=arrays

## Solution:

# Complete the arrayManipulation function below.
def merge(e1,e2,k1,k2):
    e = []
    k = []
    while len(e1) + len(e2) > 0:
        if len(e1) == 0:
            e.append(e2[0])
            k.append(k2[0])
            e2.pop(0)
            k2.pop(0)
        else:
            c1 = e1[0]
            y1 = k1[0]
            if len(e2) == 0:
                e.append(c1)
                k.append(y1)
                e1.pop(0)
                k1.pop(0)
            else:
                c2 = e2[0]
                y2 = k2[0]
                if c1 < c2:
                    e.append(c1)
                    k.append(y1)
                    e1.pop(0)
                    k1.pop(0)
                else:
                    e.append(c2)
                    k.append(y2)
                    e2.pop(0)
                    k2.pop(0)
    return e,k

def merge_list(el,kl):
    elm = []
    klm = []
    while len(el)>0:
        if len(el) == 1:
            elm.append(el[0])
            klm.append(kl[0])
            el.pop(0)
            kl.pop(0)
        else: 
            e,k = merge(el[0],el[1],kl[0],kl[1])
            elm.append(e)
            klm.append(k)
            el.pop(0)
            el.pop(0)
            kl.pop(0)
            kl.pop(0)
    return elm,klm

def merge_sort(el,kl):
    while len(el) > 1:
        el,kl = merge_list(el,kl)
    return el[0],kl[0]


        

def arrayManipulation(n, queries):
    q = queries
    pa = n*[0]
    na = n*[0]
    i = 0
    while i < len(q):
        pa[q[i][0]-1] = pa[q[i][0]-1] + q[i][2]
        na[q[i][1]-1] = na[q[i][1]-1]-q[i][2]
        i += 1
    t = 0
    m = 0
    j = 0
    while j < n:
        t += pa[j]
        if t>m:
            m = t
        t += na[j]
        j += 1
    return m


